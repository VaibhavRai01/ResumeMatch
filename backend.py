# -*- coding: utf-8 -*-
"""Backend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1spug4RJDiBpK4cDPqubET6LwB_AcbOmX
"""

!pip install pdfplumber

!python -m spacy download en_core_web_md

import pdfplumber
import spacy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import re

# Load spaCy model for text preprocessing
nlp = spacy.load("en_core_web_md")

def extract_text_from_pdf(pdf_path):
    """
    Extracts text from a PDF file.
    Args:
    - pdf_path (str): Path to the PDF file.

    Returns:
    - str: Extracted text from the PDF.
    """
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() + "\n"
    return text

def preprocess_text(text):
    """
    Preprocesses text by removing unnecessary characters and whitespace.
    Args:
    - text (str): Raw text to preprocess.

    Returns:
    - str: Preprocessed text.
    """
    doc = nlp(text)
    # Remove punctuation, spaces, and normalize whitespace
    processed_text = " ".join(token.text.lower() for token in doc if not token.is_punct and not token.is_space)
    return processed_text

def compute_cosine_similarity(text1, text2):
    """
    Computes cosine similarity between two texts.
    Args:
    - text1 (str): First text for comparison.
    - text2 (str): Second text for comparison.

    Returns:
    - float: Cosine similarity as a percentage.
    """
    vectorizer = TfidfVectorizer()
    vectors = vectorizer.fit_transform([text1, text2])
    similarity = cosine_similarity(vectors[0:1], vectors[1:2])
    return similarity[0][0] * 100  # Convert to percentage

def extract_resume_text(resume_path):
    """
    Extracts and preprocesses text from a resume PDF.
    Args:
    - resume_path (str): Path to the resume PDF.

    Returns:
    - str: Preprocessed resume text.
    """
    resume_text = extract_text_from_pdf(resume_path)
    return preprocess_text(resume_text)

def extract_job_description_text(job_description_path):
    """
    Extracts and preprocesses text from a job description PDF.
    Args:
    - job_description_path (str): Path to the job description PDF.

    Returns:
    - str: Preprocessed job description text.
    """
    job_description_text = extract_text_from_pdf(job_description_path)
    return preprocess_text(job_description_text)

def main(resume_path, job_description_path):
    """
    Main function to handle resume and job description comparison.
    Args:
    - resume_path (str): Path to the resume PDF.
    - job_description_path (str): Path to the job description PDF.
    """
    # Extract and preprocess resume text
    resume_text = extract_resume_text(resume_path)

    # Extract and preprocess job description text
    job_description_text = extract_job_description_text(job_description_path)

    # Compute cosine similarity
    similarity_percentage = compute_cosine_similarity(resume_text, job_description_text)

    # Print the result
    print(f"Cosine Similarity: {similarity_percentage:.2f}%")

if __name__ == "__main__":
    # Example paths to PDF files (replace with actual paths)
    resume_path = "VaibhavRaiOffCampus.pdf"
    job_description_path = "path_to_job_description.pdf"

    # Run the main function
    main(resume_path, job_description_path)